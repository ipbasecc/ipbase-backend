### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Bizcard {
  address: String
  alias: String
  avatar: UploadFileEntityResponse
  bizcard_collection: BizcardCollectionEntityResponse
  createdAt: DateTime
  default_provider: String
  description: String
  email: String
  name: String
  phone: String
  providers(filters: ComponentBizCardProviderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBizCardProvider]
  publishedAt: DateTime
  title: String
  updatedAt: DateTime
  user: UsersPermissionsUserEntityResponse
}

type BizcardCollection {
  bizcard: BizcardEntityResponse
  comment: String
  createdAt: DateTime
  name: String
  publishedAt: DateTime
  tags(filters: ComponentAtomTagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentAtomTag]
  updatedAt: DateTime
  user: UsersPermissionsUserEntityResponse
}

type BizcardCollectionEntity {
  attributes: BizcardCollection
  id: ID
}

type BizcardCollectionEntityResponse {
  data: BizcardCollectionEntity
}

type BizcardCollectionEntityResponseCollection {
  data: [BizcardCollectionEntity!]!
  meta: ResponseCollectionMeta!
}

input BizcardCollectionFiltersInput {
  and: [BizcardCollectionFiltersInput]
  bizcard: BizcardFiltersInput
  comment: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: BizcardCollectionFiltersInput
  or: [BizcardCollectionFiltersInput]
  publishedAt: DateTimeFilterInput
  tags: ComponentAtomTagFiltersInput
  updatedAt: DateTimeFilterInput
  user: UsersPermissionsUserFiltersInput
}

input BizcardCollectionInput {
  bizcard: ID
  comment: String
  name: String
  publishedAt: DateTime
  tags: [ComponentAtomTagInput]
  user: ID
}

type BizcardCollectionRelationResponseCollection {
  data: [BizcardCollectionEntity!]!
}

type BizcardEntity {
  attributes: Bizcard
  id: ID
}

type BizcardEntityResponse {
  data: BizcardEntity
}

type BizcardEntityResponseCollection {
  data: [BizcardEntity!]!
  meta: ResponseCollectionMeta!
}

input BizcardFiltersInput {
  address: StringFilterInput
  alias: StringFilterInput
  and: [BizcardFiltersInput]
  bizcard_collection: BizcardCollectionFiltersInput
  createdAt: DateTimeFilterInput
  default_provider: StringFilterInput
  description: StringFilterInput
  email: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: BizcardFiltersInput
  or: [BizcardFiltersInput]
  phone: StringFilterInput
  providers: ComponentBizCardProviderFiltersInput
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
  user: UsersPermissionsUserFiltersInput
}

input BizcardInput {
  address: String
  alias: String
  avatar: ID
  bizcard_collection: ID
  default_provider: String
  description: String
  email: String
  name: String
  phone: String
  providers: [ComponentBizCardProviderInput]
  publishedAt: DateTime
  title: String
  user: ID
}

type BizcardRelationResponseCollection {
  data: [BizcardEntity!]!
}

type Board {
  belonged: String
  board_members(filters: MemberFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MemberRelationResponseCollection
  board_members_roles(filters: MemberRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MemberRoleRelationResponseCollection
  createdAt: DateTime
  creator: UsersPermissionsUserEntityResponse
  groups(filters: GroupFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): GroupRelationResponseCollection
  metadata: JSON
  mm_channel_id: String
  mm_team_id: String
  name: String
  project: ProjectEntityResponse
  protected: Boolean
  publishedAt: DateTime
  readonly: Boolean
  type: ENUM_BOARD_TYPE
  unread_count: Int
  updatedAt: DateTime
}

type BoardEntity {
  attributes: Board
  id: ID
}

type BoardEntityResponse {
  data: BoardEntity
}

type BoardEntityResponseCollection {
  data: [BoardEntity!]!
  meta: ResponseCollectionMeta!
}

input BoardFiltersInput {
  and: [BoardFiltersInput]
  belonged: StringFilterInput
  board_members: MemberFiltersInput
  board_members_roles: MemberRoleFiltersInput
  createdAt: DateTimeFilterInput
  creator: UsersPermissionsUserFiltersInput
  groups: GroupFiltersInput
  id: IDFilterInput
  metadata: JSONFilterInput
  mm_channel_id: StringFilterInput
  mm_team_id: StringFilterInput
  name: StringFilterInput
  not: BoardFiltersInput
  or: [BoardFiltersInput]
  project: ProjectFiltersInput
  protected: BooleanFilterInput
  publishedAt: DateTimeFilterInput
  readonly: BooleanFilterInput
  type: StringFilterInput
  unread_count: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input BoardInput {
  belonged: String
  board_members: [ID]
  board_members_roles: [ID]
  creator: ID
  groups: [ID]
  metadata: JSON
  mm_channel_id: String
  mm_team_id: String
  name: String
  project: ID
  protected: Boolean
  publishedAt: DateTime
  readonly: Boolean
  type: ENUM_BOARD_TYPE
  unread_count: Int
}

type BoardRelationResponseCollection {
  data: [BoardEntity!]!
}

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  nei: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type Card {
  blocked(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  card_documents(filters: DocumentFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): DocumentRelationResponseCollection
  card_kanban: KanbanEntityResponse
  card_members(filters: MemberFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MemberRelationResponseCollection
  chat_service: JSON
  color_marker: String
  column: ColumnEntityResponse
  completed_by(filters: MemberFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MemberRelationResponseCollection
  content: String
  createdAt: DateTime
  creator: UsersPermissionsUserEntityResponse
  default_version: Int
  disable_share: Boolean
  expand: Boolean
  feedback: TodogroupEntityResponse
  followed_bies(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  importance: Float
  jsonContent: JSON
  member_roles(filters: MemberRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MemberRoleRelationResponseCollection
  mm_feedback_group: JSON
  mm_thread: JSON
  name: String
  overviews(filters: OverviewFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): OverviewRelationResponseCollection
  private: Boolean
  protected: Boolean
  publishedAt: DateTime
  readonly: Boolean
  schedule: ScheduleEntityResponse
  score: Int
  share_codes(filters: ComponentProjectShareCodeFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentProjectShareCode]
  status: String
  storage: StorageEntityResponse
  todogroups(filters: TodogroupFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TodogroupRelationResponseCollection
  type: String
  updatedAt: DateTime
  urgency: Float
}

type CardEntity {
  attributes: Card
  id: ID
}

type CardEntityResponse {
  data: CardEntity
}

type CardEntityResponseCollection {
  data: [CardEntity!]!
  meta: ResponseCollectionMeta!
}

input CardFiltersInput {
  and: [CardFiltersInput]
  blocked: UsersPermissionsUserFiltersInput
  card_documents: DocumentFiltersInput
  card_kanban: KanbanFiltersInput
  card_members: MemberFiltersInput
  chat_service: JSONFilterInput
  color_marker: StringFilterInput
  column: ColumnFiltersInput
  completed_by: MemberFiltersInput
  content: StringFilterInput
  createdAt: DateTimeFilterInput
  creator: UsersPermissionsUserFiltersInput
  default_version: IntFilterInput
  disable_share: BooleanFilterInput
  expand: BooleanFilterInput
  feedback: TodogroupFiltersInput
  followed_bies: UsersPermissionsUserFiltersInput
  id: IDFilterInput
  importance: FloatFilterInput
  jsonContent: JSONFilterInput
  member_roles: MemberRoleFiltersInput
  mm_feedback_group: JSONFilterInput
  mm_thread: JSONFilterInput
  name: StringFilterInput
  not: CardFiltersInput
  or: [CardFiltersInput]
  overviews: OverviewFiltersInput
  private: BooleanFilterInput
  protected: BooleanFilterInput
  publishedAt: DateTimeFilterInput
  readonly: BooleanFilterInput
  schedule: ScheduleFiltersInput
  score: IntFilterInput
  share_codes: ComponentProjectShareCodeFiltersInput
  status: StringFilterInput
  storage: StorageFiltersInput
  todogroups: TodogroupFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  urgency: FloatFilterInput
}

input CardInput {
  blocked: [ID]
  card_documents: [ID]
  card_kanban: ID
  card_members: [ID]
  chat_service: JSON
  color_marker: String
  column: ID
  completed_by: [ID]
  content: String
  creator: ID
  default_version: Int
  disable_share: Boolean
  expand: Boolean
  feedback: ID
  followed_bies: [ID]
  importance: Float
  jsonContent: JSON
  member_roles: [ID]
  mm_feedback_group: JSON
  mm_thread: JSON
  name: String
  overviews: [ID]
  private: Boolean
  protected: Boolean
  publishedAt: DateTime
  readonly: Boolean
  schedule: ID
  score: Int
  share_codes: [ComponentProjectShareCodeInput]
  status: String
  storage: ID
  todogroups: [ID]
  type: String
  urgency: Float
}

type CardRelationResponseCollection {
  data: [CardEntity!]!
}

type Category {
  belong_category: CategoryEntityResponse
  createdAt: DateTime
  elements(filters: ElementFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ElementRelationResponseCollection
  icon: String
  name: String!
  sub_category(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CategoryRelationResponseCollection
  updatedAt: DateTime
}

type CategoryEntity {
  attributes: Category
  id: ID
}

type CategoryEntityResponse {
  data: CategoryEntity
}

type CategoryEntityResponseCollection {
  data: [CategoryEntity!]!
  meta: ResponseCollectionMeta!
}

input CategoryFiltersInput {
  and: [CategoryFiltersInput]
  belong_category: CategoryFiltersInput
  createdAt: DateTimeFilterInput
  elements: ElementFiltersInput
  icon: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: CategoryFiltersInput
  or: [CategoryFiltersInput]
  sub_category: CategoryFiltersInput
  updatedAt: DateTimeFilterInput
}

input CategoryInput {
  belong_category: ID
  elements: [ID]
  icon: String
  name: String
  sub_category: [ID]
}

type CategoryRelationResponseCollection {
  data: [CategoryEntity!]!
}

type Channel {
  avatar: UploadFileEntityResponse
  brand: UploadFileEntityResponse
  channel_owner: UsersPermissionsUserEntityResponse
  cover(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  createdAt: DateTime
  description: String
  navigation: JSON
  post: PostEntityResponse
  publishedAt: DateTime
  slogan: String
  title: String!
  updatedAt: DateTime
  workingday(filters: ComponentAtomWorkingDayFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentAtomWorkingDay]
}

type ChannelEntity {
  attributes: Channel
  id: ID
}

type ChannelEntityResponse {
  data: ChannelEntity
}

type ChannelEntityResponseCollection {
  data: [ChannelEntity!]!
  meta: ResponseCollectionMeta!
}

input ChannelFiltersInput {
  and: [ChannelFiltersInput]
  channel_owner: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  navigation: JSONFilterInput
  not: ChannelFiltersInput
  or: [ChannelFiltersInput]
  post: PostFiltersInput
  publishedAt: DateTimeFilterInput
  slogan: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
  workingday: ComponentAtomWorkingDayFiltersInput
}

input ChannelInput {
  avatar: ID
  brand: ID
  channel_owner: ID
  cover: [ID]
  description: String
  navigation: JSON
  post: ID
  publishedAt: DateTime
  slogan: String
  title: String
  workingday: [ComponentAtomWorkingDayInput]
}

type ChannelRelationResponseCollection {
  data: [ChannelEntity!]!
}

type Column {
  cards(filters: CardFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CardRelationResponseCollection
  createdAt: DateTime
  creator: UsersPermissionsUserEntityResponse
  executor: UsersPermissionsUserEntityResponse
  kanban: KanbanEntityResponse
  name: String
  protected: Boolean
  publishedAt: DateTime
  readonly: Boolean
  status: String
  type: String
  unread_count: Int
  updatedAt: DateTime
}

type ColumnEntity {
  attributes: Column
  id: ID
}

type ColumnEntityResponse {
  data: ColumnEntity
}

type ColumnEntityResponseCollection {
  data: [ColumnEntity!]!
  meta: ResponseCollectionMeta!
}

input ColumnFiltersInput {
  and: [ColumnFiltersInput]
  cards: CardFiltersInput
  createdAt: DateTimeFilterInput
  creator: UsersPermissionsUserFiltersInput
  executor: UsersPermissionsUserFiltersInput
  id: IDFilterInput
  kanban: KanbanFiltersInput
  name: StringFilterInput
  not: ColumnFiltersInput
  or: [ColumnFiltersInput]
  protected: BooleanFilterInput
  publishedAt: DateTimeFilterInput
  readonly: BooleanFilterInput
  status: StringFilterInput
  type: StringFilterInput
  unread_count: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input ColumnInput {
  cards: [ID]
  creator: ID
  executor: ID
  kanban: ID
  name: String
  protected: Boolean
  publishedAt: DateTime
  readonly: Boolean
  status: String
  type: String
  unread_count: Int
}

type ColumnRelationResponseCollection {
  data: [ColumnEntity!]!
}

type ComponentAtomTag {
  id: ID!
  tag: String
}

input ComponentAtomTagFiltersInput {
  and: [ComponentAtomTagFiltersInput]
  not: ComponentAtomTagFiltersInput
  or: [ComponentAtomTagFiltersInput]
  tag: StringFilterInput
}

input ComponentAtomTagInput {
  id: ID
  tag: String
}

type ComponentAtomVersion {
  description: String
  icon: String
  id: ID!
  name: String
}

input ComponentAtomVersionFiltersInput {
  and: [ComponentAtomVersionFiltersInput]
  description: StringFilterInput
  icon: StringFilterInput
  name: StringFilterInput
  not: ComponentAtomVersionFiltersInput
  or: [ComponentAtomVersionFiltersInput]
}

input ComponentAtomVersionInput {
  description: String
  icon: String
  id: ID
  name: String
}

type ComponentAtomWorkingDay {
  event: String
  from: Date!
  id: ID!
  to: Date!
}

input ComponentAtomWorkingDayFiltersInput {
  and: [ComponentAtomWorkingDayFiltersInput]
  event: StringFilterInput
  from: DateFilterInput
  not: ComponentAtomWorkingDayFiltersInput
  or: [ComponentAtomWorkingDayFiltersInput]
  to: DateFilterInput
}

input ComponentAtomWorkingDayInput {
  event: String
  from: Date
  id: ID
  to: Date
}

type ComponentBizCardProvider {
  id: ID!
  invite_qrcode: UploadFileEntityResponse
  invite_uri: String
  provider_icon: UploadFileEntityResponse
  title: String
}

input ComponentBizCardProviderFiltersInput {
  and: [ComponentBizCardProviderFiltersInput]
  invite_uri: StringFilterInput
  not: ComponentBizCardProviderFiltersInput
  or: [ComponentBizCardProviderFiltersInput]
  title: StringFilterInput
}

input ComponentBizCardProviderInput {
  id: ID
  invite_qrcode: ID
  invite_uri: String
  provider_icon: ID
  title: String
}

type ComponentProjectChecklist {
  content(filters: ComponentProjectTodoFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentProjectTodo]
  id: ID!
}

input ComponentProjectChecklistFiltersInput {
  and: [ComponentProjectChecklistFiltersInput]
  content: ComponentProjectTodoFiltersInput
  not: ComponentProjectChecklistFiltersInput
  or: [ComponentProjectChecklistFiltersInput]
}

input ComponentProjectChecklistInput {
  content: [ComponentProjectTodoInput]
  id: ID
}

type ComponentProjectCollectionPermission {
  collection: String!
  create: Boolean!
  delete: Boolean!
  fields_permission(filters: ComponentProjectFieldsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentProjectFieldsPermission]
  id: ID!
  modify: Boolean!
  read: Boolean!
}

input ComponentProjectCollectionPermissionFiltersInput {
  and: [ComponentProjectCollectionPermissionFiltersInput]
  collection: StringFilterInput
  create: BooleanFilterInput
  delete: BooleanFilterInput
  fields_permission: ComponentProjectFieldsPermissionFiltersInput
  modify: BooleanFilterInput
  not: ComponentProjectCollectionPermissionFiltersInput
  or: [ComponentProjectCollectionPermissionFiltersInput]
  read: BooleanFilterInput
}

input ComponentProjectCollectionPermissionInput {
  collection: String
  create: Boolean
  delete: Boolean
  fields_permission: [ComponentProjectFieldsPermissionInput]
  id: ID
  modify: Boolean
  read: Boolean
}

type ComponentProjectFieldsPermission {
  field: String!
  id: ID!
  modify: Boolean!
}

input ComponentProjectFieldsPermissionFiltersInput {
  and: [ComponentProjectFieldsPermissionFiltersInput]
  field: StringFilterInput
  modify: BooleanFilterInput
  not: ComponentProjectFieldsPermissionFiltersInput
  or: [ComponentProjectFieldsPermissionFiltersInput]
}

input ComponentProjectFieldsPermissionInput {
  field: String
  id: ID
  modify: Boolean
}

type ComponentProjectInviteUri {
  enable: Boolean
  id: ID!
  invite_code: String
  invitor: UsersPermissionsUserEntityResponse
  max_total: Int
  message: String
  up_time: DateTime
  was_inviteds(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

input ComponentProjectInviteUriFiltersInput {
  and: [ComponentProjectInviteUriFiltersInput]
  enable: BooleanFilterInput
  invite_code: StringFilterInput
  invitor: UsersPermissionsUserFiltersInput
  max_total: IntFilterInput
  message: StringFilterInput
  not: ComponentProjectInviteUriFiltersInput
  or: [ComponentProjectInviteUriFiltersInput]
  up_time: DateTimeFilterInput
  was_inviteds: UsersPermissionsUserFiltersInput
}

input ComponentProjectInviteUriInput {
  enable: Boolean
  id: ID
  invite_code: String
  invitor: ID
  max_total: Int
  message: String
  up_time: DateTime
  was_inviteds: [ID]
}

type ComponentProjectPermission {
  collection_permission(filters: ComponentProjectCollectionPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentProjectCollectionPermission]
  id: ID!
  role: String
}

input ComponentProjectPermissionFiltersInput {
  and: [ComponentProjectPermissionFiltersInput]
  collection_permission: ComponentProjectCollectionPermissionFiltersInput
  not: ComponentProjectPermissionFiltersInput
  or: [ComponentProjectPermissionFiltersInput]
  role: StringFilterInput
}

input ComponentProjectPermissionInput {
  collection_permission: [ComponentProjectCollectionPermissionInput]
  id: ID
  role: String
}

type ComponentProjectProjectPermissionTemplate {
  card_chatService_motify: Boolean
  card_colorMarker_motify: Boolean
  card_content_motify: Boolean
  card_create: Boolean
  card_defaultVersion_motify: Boolean
  card_documnets_create: Boolean
  card_documnets_motify: Boolean
  card_importance_motify: Boolean
  card_jsonContent_motify: Boolean
  card_name_motify: Boolean
  card_overview_motify: Boolean
  card_permission_motify: Boolean
  card_role_motify: Boolean
  card_score_motify: Boolean
  card_status_motify: Boolean
  card_storage_access: Boolean
  card_storage_motify: Boolean
  card_todogroups_create: Boolean
  card_todogroups_motify: Boolean
  card_type_motify: Boolean
  card_urgency_motify: Boolean
  id: ID!
  project_board_create: Boolean
  project_board_motify: Boolean
  project_column_create: Boolean
  project_column_motify: Boolean
  project_cover_motify: Boolean
  project_defaultVersion_motify: Boolean
  project_description_motify: Boolean
  project_group_create: Boolean
  project_group_motify: Boolean
  project_invite: Boolean
  project_jsonContent_motify: Boolean
  project_kanban_create: Boolean
  project_kanban_motify: Boolean
  project_name_motify: Boolean
  project_overview_create: Boolean
  project_overview_motify: Boolean
  project_permission_motify: Boolean
  project_permisssion_motify: Boolean
  project_role_motify: Boolean
  project_storge_motify: Boolean
  project_todogroup_chat_service: Boolean
  project_todogroup_create: Boolean
  project_todogroup_motify: Boolean
  project_type_motify: Boolean
}

input ComponentProjectProjectPermissionTemplateFiltersInput {
  and: [ComponentProjectProjectPermissionTemplateFiltersInput]
  card_chatService_motify: BooleanFilterInput
  card_colorMarker_motify: BooleanFilterInput
  card_content_motify: BooleanFilterInput
  card_create: BooleanFilterInput
  card_defaultVersion_motify: BooleanFilterInput
  card_documnets_create: BooleanFilterInput
  card_documnets_motify: BooleanFilterInput
  card_importance_motify: BooleanFilterInput
  card_jsonContent_motify: BooleanFilterInput
  card_name_motify: BooleanFilterInput
  card_overview_motify: BooleanFilterInput
  card_permission_motify: BooleanFilterInput
  card_role_motify: BooleanFilterInput
  card_score_motify: BooleanFilterInput
  card_status_motify: BooleanFilterInput
  card_storage_access: BooleanFilterInput
  card_storage_motify: BooleanFilterInput
  card_todogroups_create: BooleanFilterInput
  card_todogroups_motify: BooleanFilterInput
  card_type_motify: BooleanFilterInput
  card_urgency_motify: BooleanFilterInput
  not: ComponentProjectProjectPermissionTemplateFiltersInput
  or: [ComponentProjectProjectPermissionTemplateFiltersInput]
  project_board_create: BooleanFilterInput
  project_board_motify: BooleanFilterInput
  project_column_create: BooleanFilterInput
  project_column_motify: BooleanFilterInput
  project_cover_motify: BooleanFilterInput
  project_defaultVersion_motify: BooleanFilterInput
  project_description_motify: BooleanFilterInput
  project_group_create: BooleanFilterInput
  project_group_motify: BooleanFilterInput
  project_invite: BooleanFilterInput
  project_jsonContent_motify: BooleanFilterInput
  project_kanban_create: BooleanFilterInput
  project_kanban_motify: BooleanFilterInput
  project_name_motify: BooleanFilterInput
  project_overview_create: BooleanFilterInput
  project_overview_motify: BooleanFilterInput
  project_permission_motify: BooleanFilterInput
  project_permisssion_motify: BooleanFilterInput
  project_role_motify: BooleanFilterInput
  project_storge_motify: BooleanFilterInput
  project_todogroup_chat_service: BooleanFilterInput
  project_todogroup_create: BooleanFilterInput
  project_todogroup_motify: BooleanFilterInput
  project_type_motify: BooleanFilterInput
}

input ComponentProjectProjectPermissionTemplateInput {
  card_chatService_motify: Boolean
  card_colorMarker_motify: Boolean
  card_content_motify: Boolean
  card_create: Boolean
  card_defaultVersion_motify: Boolean
  card_documnets_create: Boolean
  card_documnets_motify: Boolean
  card_importance_motify: Boolean
  card_jsonContent_motify: Boolean
  card_name_motify: Boolean
  card_overview_motify: Boolean
  card_permission_motify: Boolean
  card_role_motify: Boolean
  card_score_motify: Boolean
  card_status_motify: Boolean
  card_storage_access: Boolean
  card_storage_motify: Boolean
  card_todogroups_create: Boolean
  card_todogroups_motify: Boolean
  card_type_motify: Boolean
  card_urgency_motify: Boolean
  id: ID
  project_board_create: Boolean
  project_board_motify: Boolean
  project_column_create: Boolean
  project_column_motify: Boolean
  project_cover_motify: Boolean
  project_defaultVersion_motify: Boolean
  project_description_motify: Boolean
  project_group_create: Boolean
  project_group_motify: Boolean
  project_invite: Boolean
  project_jsonContent_motify: Boolean
  project_kanban_create: Boolean
  project_kanban_motify: Boolean
  project_name_motify: Boolean
  project_overview_create: Boolean
  project_overview_motify: Boolean
  project_permission_motify: Boolean
  project_permisssion_motify: Boolean
  project_role_motify: Boolean
  project_storge_motify: Boolean
  project_todogroup_chat_service: Boolean
  project_todogroup_create: Boolean
  project_todogroup_motify: Boolean
  project_type_motify: Boolean
}

type ComponentProjectRole {
  collection_permission(filters: ComponentProjectCollectionPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentProjectCollectionPermission]
  id: ID!
  members(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  role: String
}

input ComponentProjectRoleFiltersInput {
  and: [ComponentProjectRoleFiltersInput]
  collection_permission: ComponentProjectCollectionPermissionFiltersInput
  members: UsersPermissionsUserFiltersInput
  not: ComponentProjectRoleFiltersInput
  or: [ComponentProjectRoleFiltersInput]
  role: StringFilterInput
}

input ComponentProjectRoleInput {
  collection_permission: [ComponentProjectCollectionPermissionInput]
  id: ID
  members: [ID]
  role: String
}

type ComponentProjectShareCode {
  code: String
  creator: UsersPermissionsUserEntityResponse
  disable: Boolean
  id: ID!
  max_count: Int
  props: JSON
  up_time: Date
}

input ComponentProjectShareCodeFiltersInput {
  and: [ComponentProjectShareCodeFiltersInput]
  code: StringFilterInput
  creator: UsersPermissionsUserFiltersInput
  disable: BooleanFilterInput
  max_count: IntFilterInput
  not: ComponentProjectShareCodeFiltersInput
  or: [ComponentProjectShareCodeFiltersInput]
  props: JSONFilterInput
  up_time: DateFilterInput
}

input ComponentProjectShareCodeInput {
  code: String
  creator: ID
  disable: Boolean
  id: ID
  max_count: Int
  props: JSON
  up_time: Date
}

type ComponentProjectTodo {
  content: String
  end: DateTime
  executor(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  id: ID!
  jsonContent: JSON
  start: DateTime
  status: String
  type: String
}

input ComponentProjectTodoFiltersInput {
  and: [ComponentProjectTodoFiltersInput]
  content: StringFilterInput
  end: DateTimeFilterInput
  executor: UsersPermissionsUserFiltersInput
  jsonContent: JSONFilterInput
  not: ComponentProjectTodoFiltersInput
  or: [ComponentProjectTodoFiltersInput]
  start: DateTimeFilterInput
  status: StringFilterInput
  type: StringFilterInput
}

input ComponentProjectTodoInput {
  content: String
  end: DateTime
  executor: [ID]
  id: ID
  jsonContent: JSON
  start: DateTime
  status: String
  type: String
}

type ComponentProjectTodos {
  id: ID!
  title: String
  todo(filters: ComponentProjectTodoFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentProjectTodo]
}

input ComponentProjectTodosFiltersInput {
  and: [ComponentProjectTodosFiltersInput]
  not: ComponentProjectTodosFiltersInput
  or: [ComponentProjectTodosFiltersInput]
  title: StringFilterInput
  todo: ComponentProjectTodoFiltersInput
}

input ComponentProjectTodosInput {
  id: ID
  title: String
  todo: [ComponentProjectTodoInput]
}

type ComponentUserConfig {
  default_bizcard: BizcardEntityResponse
  id: ID!
  lang: String
  navigation: JSON
  project_preference: JSON
  theme: String
}

input ComponentUserConfigFiltersInput {
  and: [ComponentUserConfigFiltersInput]
  default_bizcard: BizcardFiltersInput
  lang: StringFilterInput
  navigation: JSONFilterInput
  not: ComponentUserConfigFiltersInput
  or: [ComponentUserConfigFiltersInput]
  project_preference: JSONFilterInput
  theme: StringFilterInput
}

input ComponentUserConfigInput {
  default_bizcard: ID
  id: ID
  lang: String
  navigation: JSON
  project_preference: JSON
  theme: String
}

type ComponentUserCreator {
  description: String
  id: ID!
  isExcutor: Boolean
  isOwner: Boolean
  responsibility: String
  role: String
  title: String
  user: UsersPermissionsUserEntityResponse
}

input ComponentUserCreatorFiltersInput {
  and: [ComponentUserCreatorFiltersInput]
  description: StringFilterInput
  isExcutor: BooleanFilterInput
  isOwner: BooleanFilterInput
  not: ComponentUserCreatorFiltersInput
  or: [ComponentUserCreatorFiltersInput]
  responsibility: StringFilterInput
  role: StringFilterInput
  title: StringFilterInput
  user: UsersPermissionsUserFiltersInput
}

input ComponentUserCreatorInput {
  description: String
  id: ID
  isExcutor: Boolean
  isOwner: Boolean
  responsibility: String
  role: String
  title: String
  user: ID
}

type ComponentUserProfile {
  avatar: UploadFileEntityResponse
  bio: String
  brand(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  cover: UploadFileEntityResponse
  description: String
  id: ID!
  title: String
}

input ComponentUserProfileFiltersInput {
  and: [ComponentUserProfileFiltersInput]
  bio: StringFilterInput
  description: StringFilterInput
  not: ComponentUserProfileFiltersInput
  or: [ComponentUserProfileFiltersInput]
  title: StringFilterInput
}

input ComponentUserProfileInput {
  avatar: ID
  bio: String
  brand: [ID]
  cover: ID
  description: String
  id: ID
  title: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nei: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  nei: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

type Document {
  by_card: CardEntityResponse
  by_project: ProjectEntityResponse
  by_user: UsersPermissionsUserEntityResponse
  createdAt: DateTime
  creator: UsersPermissionsUserEntityResponse
  disable_share: Boolean
  jsonContent: JSON
  mm_thread: JSON
  passcode: String
  publishedAt: DateTime
  share_codes(filters: ComponentProjectShareCodeFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentProjectShareCode]
  title: String
  type: String
  updatedAt: DateTime
}

type DocumentEntity {
  attributes: Document
  id: ID
}

type DocumentEntityResponse {
  data: DocumentEntity
}

type DocumentEntityResponseCollection {
  data: [DocumentEntity!]!
  meta: ResponseCollectionMeta!
}

input DocumentFiltersInput {
  and: [DocumentFiltersInput]
  by_card: CardFiltersInput
  by_project: ProjectFiltersInput
  by_user: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  creator: UsersPermissionsUserFiltersInput
  disable_share: BooleanFilterInput
  id: IDFilterInput
  jsonContent: JSONFilterInput
  mm_thread: JSONFilterInput
  not: DocumentFiltersInput
  or: [DocumentFiltersInput]
  passcode: StringFilterInput
  publishedAt: DateTimeFilterInput
  share_codes: ComponentProjectShareCodeFiltersInput
  title: StringFilterInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input DocumentInput {
  by_card: ID
  by_project: ID
  by_user: ID
  creator: ID
  disable_share: Boolean
  jsonContent: JSON
  mm_thread: JSON
  passcode: String
  publishedAt: DateTime
  share_codes: [ComponentProjectShareCodeInput]
  title: String
  type: String
}

type DocumentRelationResponseCollection {
  data: [DocumentEntity!]!
}

enum ENUM_BOARD_TYPE {
  assets
  classroom
  kanban
  segment
}

enum ENUM_POPULARIZE_TARGET {
  blank
  parent
  self
  top
}

enum ENUM_SCHEDULE_TYPE {
  O
  P
}

enum ENUM_STORAGE_TYPE {
  azure_blob
  local
}

enum ENUM_TODO_TYPE {
  node
  todo
}

type Element {
  attachedBy_message: MessageEntityResponse
  attachments(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  author: UsersPermissionsUserEntityResponse
  category: CategoryEntityResponse
  content: String
  cover: UploadFileEntityResponse
  createdAt: DateTime
  creator: UsersPermissionsUserEntityResponse
  description: String
  favorite_by(filters: FavoriteFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): FavoriteRelationResponseCollection
  favorite_count: Int
  is_opus: Boolean
  liked_by(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  liked_count: Int
  makers(filters: ComponentUserCreatorFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentUserCreator]
  media: UploadFileEntityResponse
  post: PostEntityResponse
  publishedAt: DateTime
  relationBy: ElementEntityResponse
  relations(filters: ElementFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ElementRelationResponseCollection
  tags(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagRelationResponseCollection
  title: String!
  type: String!
  uid: String
  unliked_by(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  unliked_count: Int
  updatedAt: DateTime
  viewed_by(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  viewed_count: Int
}

type ElementEntity {
  attributes: Element
  id: ID
}

type ElementEntityResponse {
  data: ElementEntity
}

type ElementEntityResponseCollection {
  data: [ElementEntity!]!
  meta: ResponseCollectionMeta!
}

input ElementFiltersInput {
  and: [ElementFiltersInput]
  attachedBy_message: MessageFiltersInput
  author: UsersPermissionsUserFiltersInput
  category: CategoryFiltersInput
  content: StringFilterInput
  createdAt: DateTimeFilterInput
  creator: UsersPermissionsUserFiltersInput
  description: StringFilterInput
  favorite_by: FavoriteFiltersInput
  favorite_count: IntFilterInput
  id: IDFilterInput
  is_opus: BooleanFilterInput
  liked_by: UsersPermissionsUserFiltersInput
  liked_count: IntFilterInput
  makers: ComponentUserCreatorFiltersInput
  not: ElementFiltersInput
  or: [ElementFiltersInput]
  post: PostFiltersInput
  publishedAt: DateTimeFilterInput
  relationBy: ElementFiltersInput
  relations: ElementFiltersInput
  tags: TagFiltersInput
  title: StringFilterInput
  type: StringFilterInput
  uid: StringFilterInput
  unliked_by: UsersPermissionsUserFiltersInput
  unliked_count: IntFilterInput
  updatedAt: DateTimeFilterInput
  viewed_by: UsersPermissionsUserFiltersInput
  viewed_count: IntFilterInput
}

input ElementInput {
  attachedBy_message: ID
  attachments: [ID]
  author: ID
  category: ID
  content: String
  cover: ID
  creator: ID
  description: String
  favorite_by: [ID]
  favorite_count: Int
  is_opus: Boolean
  liked_by: [ID]
  liked_count: Int
  makers: [ComponentUserCreatorInput]
  media: ID
  post: ID
  publishedAt: DateTime
  relationBy: ID
  relations: [ID]
  tags: [ID]
  title: String
  type: String
  uid: String
  unliked_by: [ID]
  unliked_count: Int
  viewed_by: [ID]
  viewed_count: Int
}

type ElementRelationResponseCollection {
  data: [ElementEntity!]!
}

type Error {
  code: String!
  message: String
}

type Favorite {
  createdAt: DateTime
  elements(filters: ElementFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ElementRelationResponseCollection
  name: String!
  owner: UsersPermissionsUserEntityResponse
  updatedAt: DateTime
}

type FavoriteEntity {
  attributes: Favorite
  id: ID
}

type FavoriteEntityResponse {
  data: FavoriteEntity
}

type FavoriteEntityResponseCollection {
  data: [FavoriteEntity!]!
  meta: ResponseCollectionMeta!
}

input FavoriteFiltersInput {
  and: [FavoriteFiltersInput]
  createdAt: DateTimeFilterInput
  elements: ElementFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: FavoriteFiltersInput
  or: [FavoriteFiltersInput]
  owner: UsersPermissionsUserFiltersInput
  updatedAt: DateTimeFilterInput
}

input FavoriteInput {
  elements: [ID]
  name: String
  owner: ID
}

type FavoriteRelationResponseCollection {
  data: [FavoriteEntity!]!
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nei: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

union GenericMorph = Bizcard | BizcardCollection | Board | Card | Category | Channel | Column | ComponentAtomTag | ComponentAtomVersion | ComponentAtomWorkingDay | ComponentBizCardProvider | ComponentProjectChecklist | ComponentProjectCollectionPermission | ComponentProjectFieldsPermission | ComponentProjectInviteUri | ComponentProjectPermission | ComponentProjectProjectPermissionTemplate | ComponentProjectRole | ComponentProjectShareCode | ComponentProjectTodo | ComponentProjectTodos | ComponentUserConfig | ComponentUserCreator | ComponentUserProfile | Document | Element | Favorite | Group | I18NLocale | Kanban | Member | MemberRole | Message | Overview | PermissionTemplete | Popularize | Post | Project | Schedule | ScheduleEvent | Server | Storage | StorageFile | Tag | Talker | Team | TeamChannel | Todo | Todogroup | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type Group {
  board: BoardEntityResponse
  createdAt: DateTime
  creator: UsersPermissionsUserEntityResponse
  icon(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  kanbans(filters: KanbanFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): KanbanRelationResponseCollection
  name: String
  protected: Boolean
  publishedAt: DateTime
  readonly: Boolean
  relate_by_card: CardEntityResponse
  status: String
  unread_count: Int
  updatedAt: DateTime
}

type GroupEntity {
  attributes: Group
  id: ID
}

type GroupEntityResponse {
  data: GroupEntity
}

type GroupEntityResponseCollection {
  data: [GroupEntity!]!
  meta: ResponseCollectionMeta!
}

input GroupFiltersInput {
  and: [GroupFiltersInput]
  board: BoardFiltersInput
  createdAt: DateTimeFilterInput
  creator: UsersPermissionsUserFiltersInput
  id: IDFilterInput
  kanbans: KanbanFiltersInput
  name: StringFilterInput
  not: GroupFiltersInput
  or: [GroupFiltersInput]
  protected: BooleanFilterInput
  publishedAt: DateTimeFilterInput
  readonly: BooleanFilterInput
  relate_by_card: CardFiltersInput
  status: StringFilterInput
  unread_count: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input GroupInput {
  board: ID
  creator: ID
  icon: [ID]
  kanbans: [ID]
  name: String
  protected: Boolean
  publishedAt: DateTime
  readonly: Boolean
  relate_by_card: ID
  status: String
  unread_count: Int
}

type GroupRelationResponseCollection {
  data: [GroupEntity!]!
}

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input I18NLocaleInput {
  code: String
  name: String
}

type I18NLocaleRelationResponseCollection {
  data: [I18NLocaleEntity!]!
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  nei: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nei: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  nei: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

type Kanban {
  columns(filters: ColumnFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ColumnRelationResponseCollection
  createdAt: DateTime
  creator: UsersPermissionsUserEntityResponse
  description: String
  disable_share: Boolean
  group: GroupEntityResponse
  icon: UploadFileEntityResponse
  preference: JSON
  private: Boolean
  protected: Boolean
  publishedAt: DateTime
  readonly: Boolean
  relate_by_card: CardEntityResponse
  share_codes(filters: ComponentProjectShareCodeFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentProjectShareCode]
  status: String
  title: String
  type: String
  unread_count: Int
  updatedAt: DateTime
}

type KanbanEntity {
  attributes: Kanban
  id: ID
}

type KanbanEntityResponse {
  data: KanbanEntity
}

type KanbanEntityResponseCollection {
  data: [KanbanEntity!]!
  meta: ResponseCollectionMeta!
}

input KanbanFiltersInput {
  and: [KanbanFiltersInput]
  columns: ColumnFiltersInput
  createdAt: DateTimeFilterInput
  creator: UsersPermissionsUserFiltersInput
  description: StringFilterInput
  disable_share: BooleanFilterInput
  group: GroupFiltersInput
  id: IDFilterInput
  not: KanbanFiltersInput
  or: [KanbanFiltersInput]
  preference: JSONFilterInput
  private: BooleanFilterInput
  protected: BooleanFilterInput
  publishedAt: DateTimeFilterInput
  readonly: BooleanFilterInput
  relate_by_card: CardFiltersInput
  share_codes: ComponentProjectShareCodeFiltersInput
  status: StringFilterInput
  title: StringFilterInput
  type: StringFilterInput
  unread_count: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input KanbanInput {
  columns: [ID]
  creator: ID
  description: String
  disable_share: Boolean
  group: ID
  icon: ID
  preference: JSON
  private: Boolean
  protected: Boolean
  publishedAt: DateTime
  readonly: Boolean
  relate_by_card: ID
  share_codes: [ComponentProjectShareCodeInput]
  status: String
  title: String
  type: String
  unread_count: Int
}

type KanbanRelationResponseCollection {
  data: [KanbanEntity!]!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  eqi: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  nei: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  null: Boolean
  or: [Long]
  startsWith: Long
}

type Member {
  by_board: BoardEntityResponse
  by_cards(filters: CardFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CardRelationResponseCollection
  by_projects(filters: ProjectFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ProjectRelationResponseCollection
  by_team: TeamEntityResponse
  by_team_channels(filters: TeamChannelFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TeamChannelRelationResponseCollection
  by_user: UsersPermissionsUserEntityResponse
  color_marker: String
  completed_cards(filters: CardFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CardRelationResponseCollection
  completed_todos(filters: TodoFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TodoRelationResponseCollection
  createdAt: DateTime
  description: String
  is_blocked: Boolean!
  is_leaved: Boolean
  member_roles(filters: MemberRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MemberRoleRelationResponseCollection
  nickname: String
  position: String
  private_avatar: UploadFileEntityResponse
  private_email: String
  schedule_events(filters: ScheduleEventFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ScheduleEventRelationResponseCollection
  title: String
  updatedAt: DateTime
}

type MemberEntity {
  attributes: Member
  id: ID
}

type MemberEntityResponse {
  data: MemberEntity
}

type MemberEntityResponseCollection {
  data: [MemberEntity!]!
  meta: ResponseCollectionMeta!
}

input MemberFiltersInput {
  and: [MemberFiltersInput]
  by_board: BoardFiltersInput
  by_cards: CardFiltersInput
  by_projects: ProjectFiltersInput
  by_team: TeamFiltersInput
  by_team_channels: TeamChannelFiltersInput
  by_user: UsersPermissionsUserFiltersInput
  color_marker: StringFilterInput
  completed_cards: CardFiltersInput
  completed_todos: TodoFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  is_blocked: BooleanFilterInput
  is_leaved: BooleanFilterInput
  member_roles: MemberRoleFiltersInput
  nickname: StringFilterInput
  not: MemberFiltersInput
  or: [MemberFiltersInput]
  position: StringFilterInput
  private_email: StringFilterInput
  schedule_events: ScheduleEventFiltersInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input MemberInput {
  by_board: ID
  by_cards: [ID]
  by_projects: [ID]
  by_team: ID
  by_team_channels: [ID]
  by_user: ID
  color_marker: String
  completed_cards: [ID]
  completed_todos: [ID]
  description: String
  is_blocked: Boolean
  is_leaved: Boolean
  member_roles: [ID]
  nickname: String
  position: String
  private_avatar: ID
  private_email: String
  schedule_events: [ID]
  title: String
}

type MemberRelationResponseCollection {
  data: [MemberEntity!]!
}

type MemberRole {
  ACL(filters: ComponentProjectCollectionPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentProjectCollectionPermission]
  by_board: BoardEntityResponse
  by_card: CardEntityResponse
  by_project: ProjectEntityResponse
  by_team: TeamEntityResponse
  by_team_channel: TeamChannelEntityResponse
  createdAt: DateTime
  members(filters: MemberFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MemberRelationResponseCollection
  subject: String!
  updatedAt: DateTime
}

type MemberRoleEntity {
  attributes: MemberRole
  id: ID
}

type MemberRoleEntityResponse {
  data: MemberRoleEntity
}

type MemberRoleEntityResponseCollection {
  data: [MemberRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input MemberRoleFiltersInput {
  ACL: ComponentProjectCollectionPermissionFiltersInput
  and: [MemberRoleFiltersInput]
  by_board: BoardFiltersInput
  by_card: CardFiltersInput
  by_project: ProjectFiltersInput
  by_team: TeamFiltersInput
  by_team_channel: TeamChannelFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  members: MemberFiltersInput
  not: MemberRoleFiltersInput
  or: [MemberRoleFiltersInput]
  subject: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input MemberRoleInput {
  ACL: [ComponentProjectCollectionPermissionInput]
  by_board: ID
  by_card: ID
  by_project: ID
  by_team: ID
  by_team_channel: ID
  members: [ID]
  subject: String
}

type MemberRoleRelationResponseCollection {
  data: [MemberRoleEntity!]!
}

type Message {
  attached_elements(filters: ElementFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ElementRelationResponseCollection
  attachments(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  content: String!
  createdAt: DateTime
  liked_by(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  liked_count: Int
  post: PostEntityResponse
  publishedAt: DateTime
  replies(filters: MessageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): MessageRelationResponseCollection
  reply_target: MessageEntityResponse
  sender: UsersPermissionsUserEntityResponse
  talker: TalkerEntityResponse
  unliked_by(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  unliked_count: Int
  updatedAt: DateTime
}

type MessageEntity {
  attributes: Message
  id: ID
}

type MessageEntityResponse {
  data: MessageEntity
}

type MessageEntityResponseCollection {
  data: [MessageEntity!]!
  meta: ResponseCollectionMeta!
}

input MessageFiltersInput {
  and: [MessageFiltersInput]
  attached_elements: ElementFiltersInput
  content: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  liked_by: UsersPermissionsUserFiltersInput
  liked_count: IntFilterInput
  not: MessageFiltersInput
  or: [MessageFiltersInput]
  post: PostFiltersInput
  publishedAt: DateTimeFilterInput
  replies: MessageFiltersInput
  reply_target: MessageFiltersInput
  sender: UsersPermissionsUserFiltersInput
  talker: TalkerFiltersInput
  unliked_by: UsersPermissionsUserFiltersInput
  unliked_count: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input MessageInput {
  attached_elements: [ID]
  attachments: [ID]
  content: String
  liked_by: [ID]
  liked_count: Int
  post: ID
  publishedAt: DateTime
  replies: [ID]
  reply_target: ID
  sender: ID
  talker: ID
  unliked_by: [ID]
  unliked_count: Int
}

type MessageRelationResponseCollection {
  data: [MessageEntity!]!
}

type Mutation {
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createBizcard(data: BizcardInput!): BizcardEntityResponse
  createBizcardCollection(data: BizcardCollectionInput!): BizcardCollectionEntityResponse
  createBoard(data: BoardInput!): BoardEntityResponse
  createCard(data: CardInput!): CardEntityResponse
  createCategory(data: CategoryInput!): CategoryEntityResponse
  createChannel(data: ChannelInput!): ChannelEntityResponse
  createColumn(data: ColumnInput!): ColumnEntityResponse
  createDocument(data: DocumentInput!): DocumentEntityResponse
  createElement(data: ElementInput!): ElementEntityResponse
  createFavorite(data: FavoriteInput!): FavoriteEntityResponse
  createGroup(data: GroupInput!): GroupEntityResponse
  createKanban(data: KanbanInput!): KanbanEntityResponse
  createMember(data: MemberInput!): MemberEntityResponse
  createMemberRole(data: MemberRoleInput!): MemberRoleEntityResponse
  createMessage(data: MessageInput!): MessageEntityResponse
  createOverview(data: OverviewInput!): OverviewEntityResponse
  createPopularize(data: PopularizeInput!): PopularizeEntityResponse
  createPost(data: PostInput!): PostEntityResponse
  createProject(data: ProjectInput!): ProjectEntityResponse
  createSchedule(data: ScheduleInput!): ScheduleEntityResponse
  createScheduleEvent(data: ScheduleEventInput!): ScheduleEventEntityResponse
  createStorage(data: StorageInput!): StorageEntityResponse
  createStorageFile(data: StorageFileInput!): StorageFileEntityResponse
  createTag(data: TagInput!): TagEntityResponse
  createTalker(data: TalkerInput!): TalkerEntityResponse
  createTeam(data: TeamInput!): TeamEntityResponse
  createTeamChannel(data: TeamChannelInput!): TeamChannelEntityResponse
  createTodo(data: TodoInput!): TodoEntityResponse
  createTodogroup(data: TodogroupInput!): TodogroupEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteBizcard(id: ID!): BizcardEntityResponse
  deleteBizcardCollection(id: ID!): BizcardCollectionEntityResponse
  deleteBoard(id: ID!): BoardEntityResponse
  deleteCard(id: ID!): CardEntityResponse
  deleteCategory(id: ID!): CategoryEntityResponse
  deleteChannel(id: ID!): ChannelEntityResponse
  deleteColumn(id: ID!): ColumnEntityResponse
  deleteDocument(id: ID!): DocumentEntityResponse
  deleteElement(id: ID!): ElementEntityResponse
  deleteFavorite(id: ID!): FavoriteEntityResponse
  deleteGroup(id: ID!): GroupEntityResponse
  deleteKanban(id: ID!): KanbanEntityResponse
  deleteMember(id: ID!): MemberEntityResponse
  deleteMemberRole(id: ID!): MemberRoleEntityResponse
  deleteMessage(id: ID!): MessageEntityResponse
  deleteOverview(id: ID!): OverviewEntityResponse
  deletePermissionTemplete: PermissionTempleteEntityResponse
  deletePopularize(id: ID!): PopularizeEntityResponse
  deletePost(id: ID!): PostEntityResponse
  deleteProject(id: ID!): ProjectEntityResponse
  deleteSchedule(id: ID!): ScheduleEntityResponse
  deleteScheduleEvent(id: ID!): ScheduleEventEntityResponse
  deleteServer: ServerEntityResponse
  deleteStorage(id: ID!): StorageEntityResponse
  deleteStorageFile(id: ID!): StorageFileEntityResponse
  deleteTag(id: ID!): TagEntityResponse
  deleteTalker(id: ID!): TalkerEntityResponse
  deleteTeam(id: ID!): TeamEntityResponse
  deleteTeamChannel(id: ID!): TeamChannelEntityResponse
  deleteTodo(id: ID!): TodoEntityResponse
  deleteTodogroup(id: ID!): TodogroupEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateBizcard(data: BizcardInput!, id: ID!): BizcardEntityResponse
  updateBizcardCollection(data: BizcardCollectionInput!, id: ID!): BizcardCollectionEntityResponse
  updateBoard(data: BoardInput!, id: ID!): BoardEntityResponse
  updateCard(data: CardInput!, id: ID!): CardEntityResponse
  updateCategory(data: CategoryInput!, id: ID!): CategoryEntityResponse
  updateChannel(data: ChannelInput!, id: ID!): ChannelEntityResponse
  updateColumn(data: ColumnInput!, id: ID!): ColumnEntityResponse
  updateDocument(data: DocumentInput!, id: ID!): DocumentEntityResponse
  updateElement(data: ElementInput!, id: ID!): ElementEntityResponse
  updateFavorite(data: FavoriteInput!, id: ID!): FavoriteEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateGroup(data: GroupInput!, id: ID!): GroupEntityResponse
  updateKanban(data: KanbanInput!, id: ID!): KanbanEntityResponse
  updateMember(data: MemberInput!, id: ID!): MemberEntityResponse
  updateMemberRole(data: MemberRoleInput!, id: ID!): MemberRoleEntityResponse
  updateMessage(data: MessageInput!, id: ID!): MessageEntityResponse
  updateOverview(data: OverviewInput!, id: ID!): OverviewEntityResponse
  updatePermissionTemplete(data: PermissionTempleteInput!): PermissionTempleteEntityResponse
  updatePopularize(data: PopularizeInput!, id: ID!): PopularizeEntityResponse
  updatePost(data: PostInput!, id: ID!): PostEntityResponse
  updateProject(data: ProjectInput!, id: ID!): ProjectEntityResponse
  updateSchedule(data: ScheduleInput!, id: ID!): ScheduleEntityResponse
  updateScheduleEvent(data: ScheduleEventInput!, id: ID!): ScheduleEventEntityResponse
  updateServer(data: ServerInput!): ServerEntityResponse
  updateStorage(data: StorageInput!, id: ID!): StorageEntityResponse
  updateStorageFile(data: StorageFileInput!, id: ID!): StorageFileEntityResponse
  updateTag(data: TagInput!, id: ID!): TagEntityResponse
  updateTalker(data: TalkerInput!, id: ID!): TalkerEntityResponse
  updateTeam(data: TeamInput!, id: ID!): TeamEntityResponse
  updateTeamChannel(data: TeamChannelInput!, id: ID!): TeamChannelEntityResponse
  updateTodo(data: TodoInput!, id: ID!): TodoEntityResponse
  updateTodogroup(data: TodogroupInput!, id: ID!): TodogroupEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Overview {
  card: CardEntityResponse
  createdAt: DateTime
  deadline: DateTime
  description: String
  end: Date
  jsonContent: JSON
  media: UploadFileEntityResponse
  name: String
  project: ProjectEntityResponse
  publishedAt: DateTime
  start: Date
  updatedAt: DateTime
}

type OverviewEntity {
  attributes: Overview
  id: ID
}

type OverviewEntityResponse {
  data: OverviewEntity
}

type OverviewEntityResponseCollection {
  data: [OverviewEntity!]!
  meta: ResponseCollectionMeta!
}

input OverviewFiltersInput {
  and: [OverviewFiltersInput]
  card: CardFiltersInput
  createdAt: DateTimeFilterInput
  deadline: DateTimeFilterInput
  description: StringFilterInput
  end: DateFilterInput
  id: IDFilterInput
  jsonContent: JSONFilterInput
  name: StringFilterInput
  not: OverviewFiltersInput
  or: [OverviewFiltersInput]
  project: ProjectFiltersInput
  publishedAt: DateTimeFilterInput
  start: DateFilterInput
  updatedAt: DateTimeFilterInput
}

input OverviewInput {
  card: ID
  deadline: DateTime
  description: String
  end: Date
  jsonContent: JSON
  media: ID
  name: String
  project: ID
  publishedAt: DateTime
  start: Date
}

type OverviewRelationResponseCollection {
  data: [OverviewEntity!]!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

type PermissionTemplete {
  createdAt: DateTime
  publishedAt: DateTime
  updatedAt: DateTime
}

type PermissionTempleteEntity {
  attributes: PermissionTemplete
  id: ID
}

type PermissionTempleteEntityResponse {
  data: PermissionTempleteEntity
}

type PermissionTempleteEntityResponseCollection {
  data: [PermissionTempleteEntity!]!
  meta: ResponseCollectionMeta!
}

input PermissionTempleteFiltersInput {
  and: [PermissionTempleteFiltersInput]
  createdAt: DateTimeFilterInput
  not: PermissionTempleteFiltersInput
  or: [PermissionTempleteFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input PermissionTempleteInput {
  publishedAt: DateTime
}

type PermissionTempleteRelationResponseCollection {
  data: [PermissionTempleteEntity!]!
}

type Popularize {
  content: String
  createdAt: DateTime
  description: String
  medias(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  position: String!
  publishedAt: DateTime
  target: ENUM_POPULARIZE_TARGET
  title: String
  type: String!
  updatedAt: DateTime
  uri: String
}

type PopularizeEntity {
  attributes: Popularize
  id: ID
}

type PopularizeEntityResponse {
  data: PopularizeEntity
}

type PopularizeEntityResponseCollection {
  data: [PopularizeEntity!]!
  meta: ResponseCollectionMeta!
}

input PopularizeFiltersInput {
  and: [PopularizeFiltersInput]
  content: StringFilterInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: PopularizeFiltersInput
  or: [PopularizeFiltersInput]
  position: StringFilterInput
  publishedAt: DateTimeFilterInput
  target: StringFilterInput
  title: StringFilterInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  uri: StringFilterInput
}

input PopularizeInput {
  content: String
  description: String
  medias: [ID]
  name: String
  position: String
  publishedAt: DateTime
  target: ENUM_POPULARIZE_TARGET
  title: String
  type: String
  uri: String
}

type PopularizeRelationResponseCollection {
  data: [PopularizeEntity!]!
}

type Post {
  channel: ChannelEntityResponse
  createdAt: DateTime
  element: ElementEntityResponse
  messages(filters: MessageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): MessageRelationResponseCollection
  publishedAt: DateTime
  title: String
  updatedAt: DateTime
}

type PostEntity {
  attributes: Post
  id: ID
}

type PostEntityResponse {
  data: PostEntity
}

type PostEntityResponseCollection {
  data: [PostEntity!]!
  meta: ResponseCollectionMeta!
}

input PostFiltersInput {
  and: [PostFiltersInput]
  channel: ChannelFiltersInput
  createdAt: DateTimeFilterInput
  element: ElementFiltersInput
  id: IDFilterInput
  messages: MessageFiltersInput
  not: PostFiltersInput
  or: [PostFiltersInput]
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input PostInput {
  channel: ID
  element: ID
  messages: [ID]
  publishedAt: DateTime
  title: String
}

type PostRelationResponseCollection {
  data: [PostEntity!]!
}

type Project {
  blocked(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  boards(filters: BoardFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BoardRelationResponseCollection
  by_team: TeamEntityResponse
  chat_service: JSON
  cover: UploadFileEntityResponse
  createdAt: DateTime
  creator: UsersPermissionsUserEntityResponse
  default_version: Int
  description: String
  invite_uris(filters: ComponentProjectInviteUriFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentProjectInviteUri]
  jsonContent: JSON
  member_roles(filters: MemberRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MemberRoleRelationResponseCollection
  members(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  mm_channel: JSON
  mm_channel_id: String
  name: String
  overviews(filters: OverviewFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): OverviewRelationResponseCollection
  parent_project: ProjectEntityResponse
  preferences: JSON
  private: Boolean
  project_documents(filters: DocumentFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): DocumentRelationResponseCollection
  project_members(filters: MemberFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MemberRelationResponseCollection
  protected: Boolean
  publishedAt: DateTime
  readonly: Boolean
  schedules(filters: ScheduleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ScheduleRelationResponseCollection
  storages(filters: StorageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): StorageRelationResponseCollection
  sub_projects(filters: ProjectFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ProjectRelationResponseCollection
  todogroups(filters: TodogroupFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TodogroupRelationResponseCollection
  type: String
  updatedAt: DateTime
}

type ProjectEntity {
  attributes: Project
  id: ID
}

type ProjectEntityResponse {
  data: ProjectEntity
}

type ProjectEntityResponseCollection {
  data: [ProjectEntity!]!
  meta: ResponseCollectionMeta!
}

input ProjectFiltersInput {
  and: [ProjectFiltersInput]
  blocked: UsersPermissionsUserFiltersInput
  boards: BoardFiltersInput
  by_team: TeamFiltersInput
  chat_service: JSONFilterInput
  createdAt: DateTimeFilterInput
  creator: UsersPermissionsUserFiltersInput
  default_version: IntFilterInput
  description: StringFilterInput
  id: IDFilterInput
  invite_uris: ComponentProjectInviteUriFiltersInput
  jsonContent: JSONFilterInput
  member_roles: MemberRoleFiltersInput
  members: UsersPermissionsUserFiltersInput
  mm_channel: JSONFilterInput
  mm_channel_id: StringFilterInput
  name: StringFilterInput
  not: ProjectFiltersInput
  or: [ProjectFiltersInput]
  overviews: OverviewFiltersInput
  parent_project: ProjectFiltersInput
  preferences: JSONFilterInput
  private: BooleanFilterInput
  project_documents: DocumentFiltersInput
  project_members: MemberFiltersInput
  protected: BooleanFilterInput
  publishedAt: DateTimeFilterInput
  readonly: BooleanFilterInput
  schedules: ScheduleFiltersInput
  storages: StorageFiltersInput
  sub_projects: ProjectFiltersInput
  todogroups: TodogroupFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ProjectInput {
  blocked: [ID]
  boards: [ID]
  by_team: ID
  chat_service: JSON
  cover: ID
  creator: ID
  default_version: Int
  description: String
  invite_uris: [ComponentProjectInviteUriInput]
  jsonContent: JSON
  member_roles: [ID]
  members: [ID]
  mm_channel: JSON
  mm_channel_id: String
  name: String
  overviews: [ID]
  parent_project: ID
  preferences: JSON
  private: Boolean
  project_documents: [ID]
  project_members: [ID]
  protected: Boolean
  publishedAt: DateTime
  readonly: Boolean
  schedules: [ID]
  storages: [ID]
  sub_projects: [ID]
  todogroups: [ID]
  type: String
}

type ProjectRelationResponseCollection {
  data: [ProjectEntity!]!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  bizcard(id: ID): BizcardEntityResponse
  bizcardCollection(id: ID): BizcardCollectionEntityResponse
  bizcardCollections(filters: BizcardCollectionFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BizcardCollectionEntityResponseCollection
  bizcards(filters: BizcardFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BizcardEntityResponseCollection
  board(id: ID): BoardEntityResponse
  boards(filters: BoardFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BoardEntityResponseCollection
  card(id: ID): CardEntityResponse
  cards(filters: CardFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CardEntityResponseCollection
  categories(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CategoryEntityResponseCollection
  category(id: ID): CategoryEntityResponse
  channel(id: ID): ChannelEntityResponse
  channels(filters: ChannelFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ChannelEntityResponseCollection
  column(id: ID): ColumnEntityResponse
  columns(filters: ColumnFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ColumnEntityResponseCollection
  document(id: ID): DocumentEntityResponse
  documents(filters: DocumentFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): DocumentEntityResponseCollection
  element(id: ID): ElementEntityResponse
  elements(filters: ElementFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ElementEntityResponseCollection
  favorite(id: ID): FavoriteEntityResponse
  favorites(filters: FavoriteFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): FavoriteEntityResponseCollection
  group(id: ID): GroupEntityResponse
  groups(filters: GroupFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): GroupEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  kanban(id: ID): KanbanEntityResponse
  kanbans(filters: KanbanFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): KanbanEntityResponseCollection
  me: UsersPermissionsMe
  member(id: ID): MemberEntityResponse
  memberRole(id: ID): MemberRoleEntityResponse
  memberRoles(filters: MemberRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MemberRoleEntityResponseCollection
  members(filters: MemberFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MemberEntityResponseCollection
  message(id: ID): MessageEntityResponse
  messages(filters: MessageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): MessageEntityResponseCollection
  overview(id: ID): OverviewEntityResponse
  overviews(filters: OverviewFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): OverviewEntityResponseCollection
  permissionTemplete(publicationState: PublicationState = LIVE): PermissionTempleteEntityResponse
  popularize(id: ID): PopularizeEntityResponse
  popularizes(filters: PopularizeFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PopularizeEntityResponseCollection
  post(id: ID): PostEntityResponse
  posts(filters: PostFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PostEntityResponseCollection
  project(id: ID): ProjectEntityResponse
  projects(filters: ProjectFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ProjectEntityResponseCollection
  schedule(id: ID): ScheduleEntityResponse
  scheduleEvent(id: ID): ScheduleEventEntityResponse
  scheduleEvents(filters: ScheduleEventFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ScheduleEventEntityResponseCollection
  schedules(filters: ScheduleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ScheduleEntityResponseCollection
  server: ServerEntityResponse
  storage(id: ID): StorageEntityResponse
  storageFile(id: ID): StorageFileEntityResponse
  storageFiles(filters: StorageFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): StorageFileEntityResponseCollection
  storages(filters: StorageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): StorageEntityResponseCollection
  tag(id: ID): TagEntityResponse
  tags(filters: TagFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TagEntityResponseCollection
  talker(id: ID): TalkerEntityResponse
  talkers(filters: TalkerFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TalkerEntityResponseCollection
  team(id: ID): TeamEntityResponse
  teamChannel(id: ID): TeamChannelEntityResponse
  teamChannels(filters: TeamChannelFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TeamChannelEntityResponseCollection
  teams(filters: TeamFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TeamEntityResponseCollection
  todo(id: ID): TodoEntityResponse
  todogroup(id: ID): TodogroupEntityResponse
  todogroups(filters: TodogroupFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TodogroupEntityResponseCollection
  todos(filters: TodoFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TodoEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

type Schedule {
  by_card: CardEntityResponse
  by_project: ProjectEntityResponse
  by_user: UsersPermissionsUserEntityResponse
  can_read_user(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  can_write_user(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  createdAt: DateTime
  creator: UsersPermissionsUserEntityResponse
  description: String
  disable_share: Boolean
  icon: String
  mm_thread: JSON
  name: String
  private: Boolean
  publishedAt: DateTime
  schedule_events(filters: ScheduleEventFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ScheduleEventRelationResponseCollection
  share_codes(filters: ComponentProjectShareCodeFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentProjectShareCode]
  type: ENUM_SCHEDULE_TYPE
  updatedAt: DateTime
}

type ScheduleEntity {
  attributes: Schedule
  id: ID
}

type ScheduleEntityResponse {
  data: ScheduleEntity
}

type ScheduleEntityResponseCollection {
  data: [ScheduleEntity!]!
  meta: ResponseCollectionMeta!
}

type ScheduleEvent {
  EndTime: DateTime
  EventType: String
  Guid: String
  IsAllDay: Boolean
  StartTime: DateTime
  Subject: String!
  createdAt: DateTime
  creator: UsersPermissionsUserEntityResponse
  description: String
  executor: MemberEntityResponse
  location: String
  publishedAt: DateTime
  recurrenceException: String
  recurrenceID: Long
  recurrenceRule: String
  schedule: ScheduleEntityResponse
  updatedAt: DateTime
}

type ScheduleEventEntity {
  attributes: ScheduleEvent
  id: ID
}

type ScheduleEventEntityResponse {
  data: ScheduleEventEntity
}

type ScheduleEventEntityResponseCollection {
  data: [ScheduleEventEntity!]!
  meta: ResponseCollectionMeta!
}

input ScheduleEventFiltersInput {
  EndTime: DateTimeFilterInput
  EventType: StringFilterInput
  Guid: StringFilterInput
  IsAllDay: BooleanFilterInput
  StartTime: DateTimeFilterInput
  Subject: StringFilterInput
  and: [ScheduleEventFiltersInput]
  createdAt: DateTimeFilterInput
  creator: UsersPermissionsUserFiltersInput
  description: StringFilterInput
  executor: MemberFiltersInput
  id: IDFilterInput
  location: StringFilterInput
  not: ScheduleEventFiltersInput
  or: [ScheduleEventFiltersInput]
  publishedAt: DateTimeFilterInput
  recurrenceException: StringFilterInput
  recurrenceID: LongFilterInput
  recurrenceRule: StringFilterInput
  schedule: ScheduleFiltersInput
  updatedAt: DateTimeFilterInput
}

input ScheduleEventInput {
  EndTime: DateTime
  EventType: String
  Guid: String
  IsAllDay: Boolean
  StartTime: DateTime
  Subject: String
  creator: ID
  description: String
  executor: ID
  location: String
  publishedAt: DateTime
  recurrenceException: String
  recurrenceID: Long
  recurrenceRule: String
  schedule: ID
}

type ScheduleEventRelationResponseCollection {
  data: [ScheduleEventEntity!]!
}

input ScheduleFiltersInput {
  and: [ScheduleFiltersInput]
  by_card: CardFiltersInput
  by_project: ProjectFiltersInput
  by_user: UsersPermissionsUserFiltersInput
  can_read_user: UsersPermissionsUserFiltersInput
  can_write_user: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  creator: UsersPermissionsUserFiltersInput
  description: StringFilterInput
  disable_share: BooleanFilterInput
  icon: StringFilterInput
  id: IDFilterInput
  mm_thread: JSONFilterInput
  name: StringFilterInput
  not: ScheduleFiltersInput
  or: [ScheduleFiltersInput]
  private: BooleanFilterInput
  publishedAt: DateTimeFilterInput
  schedule_events: ScheduleEventFiltersInput
  share_codes: ComponentProjectShareCodeFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ScheduleInput {
  by_card: ID
  by_project: ID
  by_user: ID
  can_read_user: [ID]
  can_write_user: [ID]
  creator: ID
  description: String
  disable_share: Boolean
  icon: String
  mm_thread: JSON
  name: String
  private: Boolean
  publishedAt: DateTime
  schedule_events: [ID]
  share_codes: [ComponentProjectShareCodeInput]
  type: ENUM_SCHEDULE_TYPE
}

type ScheduleRelationResponseCollection {
  data: [ScheduleEntity!]!
}

type Server {
  createdAt: DateTime
  graphql_endpoint: String
  http_api_endpoint: String
  updatedAt: DateTime
  version: String
  ws_api_endpoint: String
  ws_endpoint: String
}

type ServerEntity {
  attributes: Server
  id: ID
}

type ServerEntityResponse {
  data: ServerEntity
}

type ServerEntityResponseCollection {
  data: [ServerEntity!]!
  meta: ResponseCollectionMeta!
}

input ServerFiltersInput {
  and: [ServerFiltersInput]
  createdAt: DateTimeFilterInput
  graphql_endpoint: StringFilterInput
  http_api_endpoint: StringFilterInput
  not: ServerFiltersInput
  or: [ServerFiltersInput]
  updatedAt: DateTimeFilterInput
  version: StringFilterInput
  ws_api_endpoint: StringFilterInput
  ws_endpoint: StringFilterInput
}

input ServerInput {
  graphql_endpoint: String
  http_api_endpoint: String
  version: String
  ws_api_endpoint: String
  ws_endpoint: String
}

type ServerRelationResponseCollection {
  data: [ServerEntity!]!
}

type Storage {
  azureInfo: JSON
  belonged_card: CardEntityResponse
  belonged_project: ProjectEntityResponse
  belonged_user: UsersPermissionsUserEntityResponse
  can_read_user(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  can_write_user(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  color_marker: JSON
  createdAt: DateTime
  creator: UsersPermissionsUserEntityResponse
  disable_share: Boolean
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String
  passcode: String
  private: Boolean
  share_codes(filters: ComponentProjectShareCodeFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentProjectShareCode]
  storage: StorageEntityResponse
  storage_files(filters: StorageFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): StorageFileRelationResponseCollection
  sub_folders(filters: StorageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): StorageRelationResponseCollection
  type: ENUM_STORAGE_TYPE
  updatedAt: DateTime
}

type StorageEntity {
  attributes: Storage
  id: ID
}

type StorageEntityResponse {
  data: StorageEntity
}

type StorageEntityResponseCollection {
  data: [StorageEntity!]!
  meta: ResponseCollectionMeta!
}

type StorageFile {
  color_marker: String
  createdAt: DateTime
  disable_share: Boolean
  file: UploadFileEntityResponse
  name: String
  owner: UsersPermissionsUserEntityResponse
  share_codes(filters: ComponentProjectShareCodeFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentProjectShareCode]
  storage: StorageEntityResponse
  updatedAt: DateTime
}

type StorageFileEntity {
  attributes: StorageFile
  id: ID
}

type StorageFileEntityResponse {
  data: StorageFileEntity
}

type StorageFileEntityResponseCollection {
  data: [StorageFileEntity!]!
  meta: ResponseCollectionMeta!
}

input StorageFileFiltersInput {
  and: [StorageFileFiltersInput]
  color_marker: StringFilterInput
  createdAt: DateTimeFilterInput
  disable_share: BooleanFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: StorageFileFiltersInput
  or: [StorageFileFiltersInput]
  owner: UsersPermissionsUserFiltersInput
  share_codes: ComponentProjectShareCodeFiltersInput
  storage: StorageFiltersInput
  updatedAt: DateTimeFilterInput
}

input StorageFileInput {
  color_marker: String
  disable_share: Boolean
  file: ID
  name: String
  owner: ID
  share_codes: [ComponentProjectShareCodeInput]
  storage: ID
}

type StorageFileRelationResponseCollection {
  data: [StorageFileEntity!]!
}

input StorageFiltersInput {
  and: [StorageFiltersInput]
  azureInfo: JSONFilterInput
  belonged_card: CardFiltersInput
  belonged_project: ProjectFiltersInput
  belonged_user: UsersPermissionsUserFiltersInput
  can_read_user: UsersPermissionsUserFiltersInput
  can_write_user: UsersPermissionsUserFiltersInput
  color_marker: JSONFilterInput
  createdAt: DateTimeFilterInput
  creator: UsersPermissionsUserFiltersInput
  disable_share: BooleanFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: StorageFiltersInput
  or: [StorageFiltersInput]
  passcode: StringFilterInput
  private: BooleanFilterInput
  share_codes: ComponentProjectShareCodeFiltersInput
  storage: StorageFiltersInput
  storage_files: StorageFileFiltersInput
  sub_folders: StorageFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input StorageInput {
  azureInfo: JSON
  belonged_card: ID
  belonged_project: ID
  belonged_user: ID
  can_read_user: [ID]
  can_write_user: [ID]
  color_marker: JSON
  creator: ID
  disable_share: Boolean
  files: [ID]
  name: String
  passcode: String
  private: Boolean
  share_codes: [ComponentProjectShareCodeInput]
  storage: ID
  storage_files: [ID]
  sub_folders: [ID]
  type: ENUM_STORAGE_TYPE
}

type StorageRelationResponseCollection {
  data: [StorageEntity!]!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nei: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

type Tag {
  createdAt: DateTime
  elements(filters: ElementFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ElementRelationResponseCollection
  name: String!
  taged_count: Int
  updatedAt: DateTime
}

type TagEntity {
  attributes: Tag
  id: ID
}

type TagEntityResponse {
  data: TagEntity
}

type TagEntityResponseCollection {
  data: [TagEntity!]!
  meta: ResponseCollectionMeta!
}

input TagFiltersInput {
  and: [TagFiltersInput]
  createdAt: DateTimeFilterInput
  elements: ElementFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: TagFiltersInput
  or: [TagFiltersInput]
  taged_count: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input TagInput {
  elements: [ID]
  name: String
  taged_count: Int
}

type TagRelationResponseCollection {
  data: [TagEntity!]!
}

type Talker {
  createdAt: DateTime
  isMuted: Boolean
  message: MessageEntityResponse
  nickname: String
  status: String
  updatedAt: DateTime
  user: UsersPermissionsUserEntityResponse
}

type TalkerEntity {
  attributes: Talker
  id: ID
}

type TalkerEntityResponse {
  data: TalkerEntity
}

type TalkerEntityResponseCollection {
  data: [TalkerEntity!]!
  meta: ResponseCollectionMeta!
}

input TalkerFiltersInput {
  and: [TalkerFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  isMuted: BooleanFilterInput
  message: MessageFiltersInput
  nickname: StringFilterInput
  not: TalkerFiltersInput
  or: [TalkerFiltersInput]
  status: StringFilterInput
  updatedAt: DateTimeFilterInput
  user: UsersPermissionsUserFiltersInput
}

input TalkerInput {
  isMuted: Boolean
  message: ID
  nickname: String
  status: String
  user: ID
}

type TalkerRelationResponseCollection {
  data: [TalkerEntity!]!
}

type Team {
  createdAt: DateTime
  default_by: UsersPermissionsUserEntityResponse
  display_name: String
  invite_uris(filters: ComponentProjectInviteUriFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentProjectInviteUri]
  member_roles(filters: MemberRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MemberRoleRelationResponseCollection
  members(filters: MemberFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MemberRelationResponseCollection
  mm_team: JSON
  name: String!
  notification: String
  projects(filters: ProjectFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ProjectRelationResponseCollection
  publishedAt: DateTime
  team_channels(filters: TeamChannelFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): TeamChannelRelationResponseCollection
  team_logo: UploadFileEntityResponse
  updatedAt: DateTime
}

type TeamChannel {
  createdAt: DateTime
  invite_uris(filters: ComponentProjectInviteUriFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentProjectInviteUri]
  member_roles(filters: MemberRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MemberRoleRelationResponseCollection
  members(filters: MemberFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MemberRelationResponseCollection
  mm_channel: JSON
  name: String
  publishedAt: DateTime
  purpose: String
  team: TeamEntityResponse
  type: String
  updatedAt: DateTime
}

type TeamChannelEntity {
  attributes: TeamChannel
  id: ID
}

type TeamChannelEntityResponse {
  data: TeamChannelEntity
}

type TeamChannelEntityResponseCollection {
  data: [TeamChannelEntity!]!
  meta: ResponseCollectionMeta!
}

input TeamChannelFiltersInput {
  and: [TeamChannelFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  invite_uris: ComponentProjectInviteUriFiltersInput
  member_roles: MemberRoleFiltersInput
  members: MemberFiltersInput
  mm_channel: JSONFilterInput
  name: StringFilterInput
  not: TeamChannelFiltersInput
  or: [TeamChannelFiltersInput]
  publishedAt: DateTimeFilterInput
  purpose: StringFilterInput
  team: TeamFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input TeamChannelInput {
  invite_uris: [ComponentProjectInviteUriInput]
  member_roles: [ID]
  members: [ID]
  mm_channel: JSON
  name: String
  publishedAt: DateTime
  purpose: String
  team: ID
  type: String
}

type TeamChannelRelationResponseCollection {
  data: [TeamChannelEntity!]!
}

type TeamEntity {
  attributes: Team
  id: ID
}

type TeamEntityResponse {
  data: TeamEntity
}

type TeamEntityResponseCollection {
  data: [TeamEntity!]!
  meta: ResponseCollectionMeta!
}

input TeamFiltersInput {
  and: [TeamFiltersInput]
  createdAt: DateTimeFilterInput
  default_by: UsersPermissionsUserFiltersInput
  display_name: StringFilterInput
  id: IDFilterInput
  invite_uris: ComponentProjectInviteUriFiltersInput
  member_roles: MemberRoleFiltersInput
  members: MemberFiltersInput
  mm_team: JSONFilterInput
  name: StringFilterInput
  not: TeamFiltersInput
  notification: StringFilterInput
  or: [TeamFiltersInput]
  projects: ProjectFiltersInput
  publishedAt: DateTimeFilterInput
  team_channels: TeamChannelFiltersInput
  updatedAt: DateTimeFilterInput
}

input TeamInput {
  default_by: ID
  display_name: String
  invite_uris: [ComponentProjectInviteUriInput]
  member_roles: [ID]
  members: [ID]
  mm_team: JSON
  name: String
  notification: String
  projects: [ID]
  publishedAt: DateTime
  team_channels: [ID]
  team_logo: ID
}

type TeamRelationResponseCollection {
  data: [TeamEntity!]!
}

"""A time string with format HH:mm:ss.SSS"""
scalar Time

input TimeFilterInput {
  and: [Time]
  between: [Time]
  contains: Time
  containsi: Time
  endsWith: Time
  eq: Time
  eqi: Time
  gt: Time
  gte: Time
  in: [Time]
  lt: Time
  lte: Time
  ne: Time
  nei: Time
  not: TimeFilterInput
  notContains: Time
  notContainsi: Time
  notIn: [Time]
  notNull: Boolean
  null: Boolean
  or: [Time]
  startsWith: Time
}

type Todo {
  attachment(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  color_marker: String
  completed_by(filters: MemberFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MemberRelationResponseCollection
  content: String
  createdAt: DateTime
  creator: UsersPermissionsUserEntityResponse
  executor: UsersPermissionsUserEntityResponse
  importance: Float
  mm_thread: JSON
  props: JSON
  status: Boolean
  todogroup: TodogroupEntityResponse
  type: ENUM_TODO_TYPE
  updatedAt: DateTime
  urgency: Float
}

type TodoEntity {
  attributes: Todo
  id: ID
}

type TodoEntityResponse {
  data: TodoEntity
}

type TodoEntityResponseCollection {
  data: [TodoEntity!]!
  meta: ResponseCollectionMeta!
}

input TodoFiltersInput {
  and: [TodoFiltersInput]
  color_marker: StringFilterInput
  completed_by: MemberFiltersInput
  content: StringFilterInput
  createdAt: DateTimeFilterInput
  creator: UsersPermissionsUserFiltersInput
  executor: UsersPermissionsUserFiltersInput
  id: IDFilterInput
  importance: FloatFilterInput
  mm_thread: JSONFilterInput
  not: TodoFiltersInput
  or: [TodoFiltersInput]
  props: JSONFilterInput
  status: BooleanFilterInput
  todogroup: TodogroupFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  urgency: FloatFilterInput
}

input TodoInput {
  attachment: [ID]
  color_marker: String
  completed_by: [ID]
  content: String
  creator: ID
  executor: ID
  importance: Float
  mm_thread: JSON
  props: JSON
  status: Boolean
  todogroup: ID
  type: ENUM_TODO_TYPE
  urgency: Float
}

type TodoRelationResponseCollection {
  data: [TodoEntity!]!
}

type Todogroup {
  card: CardEntityResponse
  color_marker: String
  createdAt: DateTime
  creator: UsersPermissionsUserEntityResponse
  kanban: KanbanEntityResponse
  name: String!
  project: ProjectEntityResponse
  todos(filters: TodoFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TodoRelationResponseCollection
  updatedAt: DateTime
  user: UsersPermissionsUserEntityResponse
}

type TodogroupEntity {
  attributes: Todogroup
  id: ID
}

type TodogroupEntityResponse {
  data: TodogroupEntity
}

type TodogroupEntityResponseCollection {
  data: [TodogroupEntity!]!
  meta: ResponseCollectionMeta!
}

input TodogroupFiltersInput {
  and: [TodogroupFiltersInput]
  card: CardFiltersInput
  color_marker: StringFilterInput
  createdAt: DateTimeFilterInput
  creator: UsersPermissionsUserFiltersInput
  id: IDFilterInput
  kanban: KanbanFiltersInput
  name: StringFilterInput
  not: TodogroupFiltersInput
  or: [TodogroupFiltersInput]
  project: ProjectFiltersInput
  todos: TodoFiltersInput
  updatedAt: DateTimeFilterInput
  user: UsersPermissionsUserFiltersInput
}

input TodogroupInput {
  card: ID
  color_marker: String
  creator: ID
  kanban: ID
  name: String
  project: ID
  todos: [ID]
  user: ID
}

type TodogroupRelationResponseCollection {
  data: [TodogroupEntity!]!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionEntityResponse {
  data: UsersPermissionsPermissionEntity
}

type UsersPermissionsPermissionEntityResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsPermissionInput {
  action: String
  role: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsRoleRelationResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  bizcard_collection_items(filters: BizcardCollectionFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BizcardCollectionRelationResponseCollection
  bizcards(filters: BizcardFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BizcardRelationResponseCollection
  blocked: Boolean
  by_members(filters: MemberFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MemberRelationResponseCollection
  can_read_schedule: ScheduleEntityResponse
  can_write_schedule: ScheduleEntityResponse
  config: ComponentUserConfig
  confirmed: Boolean
  createdAt: DateTime
  created_boards(filters: BoardFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BoardRelationResponseCollection
  created_cards(filters: CardFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CardRelationResponseCollection
  created_columns(filters: ColumnFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ColumnRelationResponseCollection
  created_elements(filters: ElementFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ElementRelationResponseCollection
  created_groups(filters: GroupFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): GroupRelationResponseCollection
  created_kanbans(filters: KanbanFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): KanbanRelationResponseCollection
  created_projects(filters: ProjectFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ProjectRelationResponseCollection
  created_schedule: ScheduleEntityResponse
  created_storages(filters: StorageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): StorageRelationResponseCollection
  default_team: TeamEntityResponse
  document: DocumentEntityResponse
  elements(filters: ElementFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ElementRelationResponseCollection
  email: String!
  executor_of_columns(filters: ColumnFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ColumnRelationResponseCollection
  executor_todo: TodoEntityResponse
  favorites(filters: FavoriteFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): FavoriteRelationResponseCollection
  followed(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  followed_cards(filters: CardFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CardRelationResponseCollection
  follows(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  liked_element(filters: ElementFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ElementRelationResponseCollection
  liked_messages(filters: MessageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): MessageRelationResponseCollection
  messages(filters: MessageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): MessageRelationResponseCollection
  mm_profile: JSON
  mm_projectChatService_team: JSON
  mm_user_id: String
  profile: ComponentUserProfile
  projects(filters: ProjectFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ProjectRelationResponseCollection
  provider: String
  role: UsersPermissionsRoleEntityResponse
  schedule_events(filters: ScheduleEventFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ScheduleEventRelationResponseCollection
  schedules(filters: ScheduleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ScheduleRelationResponseCollection
  self_tags: JSON
  storageCount: Float
  storage_files(filters: StorageFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): StorageFileRelationResponseCollection
  storages(filters: StorageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): StorageRelationResponseCollection
  talkers(filters: TalkerFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TalkerRelationResponseCollection
  todogroups(filters: TodogroupFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): TodogroupRelationResponseCollection
  unliked_element(filters: ElementFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ElementRelationResponseCollection
  unliked_messages(filters: MessageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): MessageRelationResponseCollection
  updatedAt: DateTime
  user_channel: ChannelEntityResponse
  user_documents(filters: DocumentFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): DocumentRelationResponseCollection
  username: String!
  viewed_elements(filters: ElementFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ElementRelationResponseCollection
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  bizcard_collection_items: BizcardCollectionFiltersInput
  bizcards: BizcardFiltersInput
  blocked: BooleanFilterInput
  by_members: MemberFiltersInput
  can_read_schedule: ScheduleFiltersInput
  can_write_schedule: ScheduleFiltersInput
  config: ComponentUserConfigFiltersInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  created_boards: BoardFiltersInput
  created_cards: CardFiltersInput
  created_columns: ColumnFiltersInput
  created_elements: ElementFiltersInput
  created_groups: GroupFiltersInput
  created_kanbans: KanbanFiltersInput
  created_projects: ProjectFiltersInput
  created_schedule: ScheduleFiltersInput
  created_storages: StorageFiltersInput
  default_team: TeamFiltersInput
  document: DocumentFiltersInput
  elements: ElementFiltersInput
  email: StringFilterInput
  executor_of_columns: ColumnFiltersInput
  executor_todo: TodoFiltersInput
  favorites: FavoriteFiltersInput
  followed: UsersPermissionsUserFiltersInput
  followed_cards: CardFiltersInput
  follows: UsersPermissionsUserFiltersInput
  id: IDFilterInput
  liked_element: ElementFiltersInput
  liked_messages: MessageFiltersInput
  messages: MessageFiltersInput
  mm_profile: JSONFilterInput
  mm_projectChatService_team: JSONFilterInput
  mm_user_id: StringFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  profile: ComponentUserProfileFiltersInput
  projects: ProjectFiltersInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  schedule_events: ScheduleEventFiltersInput
  schedules: ScheduleFiltersInput
  self_tags: JSONFilterInput
  storageCount: FloatFilterInput
  storage_files: StorageFileFiltersInput
  storages: StorageFiltersInput
  talkers: TalkerFiltersInput
  todogroups: TodogroupFiltersInput
  unliked_element: ElementFiltersInput
  unliked_messages: MessageFiltersInput
  updatedAt: DateTimeFilterInput
  user_channel: ChannelFiltersInput
  user_documents: DocumentFiltersInput
  username: StringFilterInput
  viewed_elements: ElementFiltersInput
}

input UsersPermissionsUserInput {
  bizcard_collection_items: [ID]
  bizcards: [ID]
  blocked: Boolean
  by_members: [ID]
  can_read_schedule: ID
  can_write_schedule: ID
  config: ComponentUserConfigInput
  confirmationToken: String
  confirmed: Boolean
  created_boards: [ID]
  created_cards: [ID]
  created_columns: [ID]
  created_elements: [ID]
  created_groups: [ID]
  created_kanbans: [ID]
  created_projects: [ID]
  created_schedule: ID
  created_storages: [ID]
  default_team: ID
  document: ID
  elements: [ID]
  email: String
  executor_of_columns: [ID]
  executor_todo: ID
  favorites: [ID]
  followed: [ID]
  followed_cards: [ID]
  follows: [ID]
  liked_element: [ID]
  liked_messages: [ID]
  messages: [ID]
  mm_profile: JSON
  mm_projectChatService_team: JSON
  mm_user_id: String
  password: String
  profile: ComponentUserProfileInput
  projects: [ID]
  provider: String
  resetPasswordToken: String
  role: ID
  schedule_events: [ID]
  schedules: [ID]
  self_tags: JSON
  storageCount: Float
  storage_files: [ID]
  storages: [ID]
  talkers: [ID]
  todogroups: [ID]
  unliked_element: [ID]
  unliked_messages: [ID]
  user_channel: ID
  user_documents: [ID]
  username: String
  viewed_elements: [ID]
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}
